import type { Address } from "@/lib/connect/viem";

import type {
  ByteArray,
  Hex,
  SignableMessage,
  Signature,
} from "../../types/misc";
import { type GetAddressErrorType, getAddress } from "../address/getAddress";
import {
  type IsAddressEqualErrorType,
  isAddressEqual,
} from "../address/isAddressEqual";

import type { ErrorType } from "../../errors/utils";
import {
  type RecoverMessageAddressErrorType,
  recoverMessageAddress,
} from "./recoverMessageAddress";

export type VerifyMessageParameters = {
  /** The address that signed the original message. */
  address: Address;
  /** The message to be verified. */
  message: SignableMessage;
  /** The signature that was generated by signing the message with the address's private key. */
  signature: Hex | ByteArray | Signature;
};

export type VerifyMessageReturnType = boolean;

export type VerifyMessageErrorType =
  | IsAddressEqualErrorType
  | GetAddressErrorType
  | RecoverMessageAddressErrorType
  | ErrorType;

/**
 * Verify that a message was signed by the provided address.
 *
 * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.
 *        It is highly recommended to use `publicClient.verifyMessage` instead to ensure
 *        wallet interoperability.
 *
 * - Docs {@link https://@/lib/connect/viem.sh/docs/utilities/verifyMessage}
 *
 * @param parameters - {@link VerifyMessageParameters}
 * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}
 */
export async function verifyMessage({
  address,
  message,
  signature,
}: VerifyMessageParameters): Promise<VerifyMessageReturnType> {
  return isAddressEqual(
    getAddress(address),
    await recoverMessageAddress({ message, signature })
  );
}
